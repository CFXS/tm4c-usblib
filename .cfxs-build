printf("Load TM4C usblib")
local config = ...
assert(_G.CFXS_TOOLCHAIN ~= nil, "_G.CFXS_TOOLCHAIN not specified")

tm4c_usblib = create_library("tm4c-usblib")
tm4c_usblib:add_include_paths("public", {"./"})

tm4c_usblib:create_precompiled_header({
    "<stdint.h>",
    "<stddef.h>",
})

if _G.CFXS_TOOLCHAIN == "GCC" or _G.CFXS_TOOLCHAIN == "Clang" then
    tm4c_usblib:add_compile_options("private", {
        "-Wno-missing-field-initializers",
        "-Wno-unused-but-set-variable",
    })
else
    error("Toolchain [".._G.CFXS_TOOLCHAIN.."] not implemented")
end

assert(tm4c_driverlib ~= nil, "tm4c_driverlib not imported")
tm4c_usblib:add_libraries(tm4c_driverlib)

local CONFIG_TEMPLATE = [[
{
    type = "host" | "device" | "host/device"
}
]]
assert(config ~= nil, "Import arguments not defined\n"..CONFIG_TEMPLATE)

-- Base sources
tm4c_usblib:add_sources("./usblib/*.c")

if config.type == "host" then
    printf(" - Host mode")
    tm4c_usblib:add_sources("./usblib/host/*.c")
elseif config.type == "device" then
    printf(" - Device mode")
    tm4c_usblib:add_sources("./usblib/device/*.c")
elseif config.type == "host/device" or config.type == "device/host" then
    printf(" - Host/Device mode")
    tm4c_usblib:add_sources("./usblib/host/*.c")
    tm4c_usblib:add_sources("./usblib/device/*.c")
else
    error("Invalid config.type: "..tostring(config.type))
end
